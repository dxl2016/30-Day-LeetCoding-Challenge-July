# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def widthOfBinaryTree(self, root: TreeNode) -> int:
        if not root:
            return 0
        
        ans = {}
        def dfs(node, level, c):
            if not node:
                if level not in ans:
                    ans[level] = [None]
                else:
                    ans[level] += [None]
                return
            
            if level not in ans:
                ans[level] = [c]
            else:
                ans[level] += [c]
            
            if node.left or node.right:
                dfs(node.left, level+1, 2*c+1)
                dfs(node.right, level+1, 2*c+2)

        
        dfs(root, 0, 0)
        # print(ans)
        result = 0
        for k in ans:
            temp = ans[k]
            flag = 0
            l, r = None, None
            for i in temp:
                if i is not None:
                    if flag == 0:
                        l = i
                        flag = 1
                    else:
                        r = i
            if r == None:
                result = max(result, 1)
            else:
                result = max(result, r-l+1)
            
            
        return result

